name: CI/CD Pipeline

on:
  push:
    branches: [ main, Develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push dockeractor image
      uses: docker/build-push-action@v2
      with:
        context: ./Security_Bots/Docker-BadActor/
        file: ./Security_Bots/Docker-BadActor/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/dockeractor:latest

    - name: Build basictrustbot image
      uses: docker/build-push-action@v2
      with:
        context: ./Security_Bots/TheBasicBot/
        file: ./Security_Bots/TheBasicBot/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/basictrustbot:latest

    - name: Build dockerindocker image
      uses: docker/build-push-action@v2
      with:
        context: ./Security_Bots/Docker-In-Docker/
        file: ./Security_Bots/Docker-In-Docker/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/docker-in-docker:latest
  
  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Pull dockeractor image
      run: docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/dockeractor:latest && echo "Pull complete"

    - name: Check image size dockeractor
      run: |
        sleep 10
        docker images --format "{{.Repository}}:{{.Tag}}\t{{.Size}}"
        SIZE=$(docker image inspect ${{ secrets.DOCKERHUB_USERNAME }}/dockeractor:latest --format='{{.Size}}')
        if [ $SIZE -gt 500000000 ]; then
          echo "Image size is too large"
          exit 1
        fi
    - name: Pull trustbot image
      run: docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/basictrustbot:latest && echo "Pull complete"
      
    - name: Check image size trustbot
      run: |
        sleep 10
        docker images --format "{{.Repository}}:{{.Tag}}\t{{.Size}}"
        SIZE=$(docker image inspect ${{ secrets.DOCKERHUB_USERNAME }}/basictrustbot:latest --format='{{.Size}}')
        if [ $SIZE -gt 1000000000 ]; then
          echo "Image size is too large"
          exit 1
        fi

    - name: Pull docker-in-docker image
      run: docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/docker-in-docker:latest && echo "Pull complete"
      
    - name: Check image size dockerindocker
      run: |
        sleep 10
        docker images --format "{{.Repository}}:{{.Tag}}\t{{.Size}}"
        SIZE=$(docker image inspect ${{ secrets.DOCKERHUB_USERNAME }}/docker-in-docker:latest --format='{{.Size}}')
        if [ $SIZE -gt 1000000000 ]; then
          echo "Image size is too large"
          exit 1
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./Security_Bots//Docker-In-Docker/
    steps:
      - uses: actions/checkout@v2

      - uses: azure/docker-login@v1
        with:
          login-server: trustinactors.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push DiD image to container registry
        run: |
          docker build -t trustinactors.azurecr.io/dockerdocker:${{ github.sha }} .
          docker push trustinactors.azurecr.io/dockerdocker:${{ github.sha }}

     
  

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/ --validate=false

      - name: Verify deployment
        run: |
          kubectl get pods
